#include "particle_system.hpp"
#include <utility>

namespace cardboard::graphics {
	Particle::Particle():
		position(glm::vec2(0)),
   		velocity(glm::vec2(0)),
		accelereration(glm::vec2(0)),
		life_time(0),
		max_lifetime(0)	{}

	Particle::Particle(Particle&& particle):
		position(std::move(particle.position)),
   		velocity(std::move(particle.velocity)),
		accelereration(std::move(particle.accelereration)),
		life_time(std::exchange(particle.life_time, 0)),
		max_lifetime(std::exchange(particle.max_lifetime, 0))	{}

	Particle& Particle::operator=(Particle&& particle) {
		this->position = std::move(particle.position);
   		this->velocity = std::move(particle.velocity);
		this->accelereration = std::move(particle.accelereration);
		this->life_time = std::exchange(particle.life_time, 0);
		this->max_lifetime = std::exchange(particle.max_lifetime, 0);

		return *this;
	}
	void ParticleSystem::summon(glm::vec2 position, glm::vec2 initial_velocity, glm::vec2 accelereration, float lifetime) {
		Particle particle;
		particle.position = position;
		particle.velocity = initial_velocity;
		particle.accelereration = accelereration;
		particle.max_lifetime = lifetime;
		particle.life_time = 0;

		this->particles.push_back(particle);
	}

	void ParticleSystem::update(float time_delta) {
		for (Particle& particle : this->particles) {
			particle.velocity += particle.accelereration * time_delta;
			particle.position += particle.velocity * time_delta;
			particle.life_time += time_delta;

			if (particle.life_time > particle.max_lifetime) {
				std::swap(particle, *(this->particles.end() - 1));
				this->particles.resize(this->particles.size() - 1);
			}
		}
	}

	void ParticleSystem::flush(QuadRenderer& renderer) {
		for (Particle& particle : this->particles) {
			renderer.draw(particle.position, glm::vec2(10));
		}
	}
}
